apply plugin: 'java'

sourceSets.main.java.srcDir('src')

repositories {
	mavenCentral()
	maven { url "https://raw.githubusercontent.com/Zelaux/MindustryRepo/master/repository" }
	maven { url 'https://www.jitpack.io' }
}

java {
	targetCompatibility = JavaVersion.VERSION_17
	sourceCompatibility = JavaVersion.VERSION_17
}

ext {
	//windows sucks
	isWindows = System.getProperty("os.name").toLowerCase().contains("windows")
	sdkRoot = System.getenv("ANDROID_HOME") ?: System.getenv("ANDROID_SDK_ROOT")
}

dependencies {
	implementation "com.github.Anuken.Arc:arc-core:$mindustryVersion"
	implementation "com.github.Anuken.Mindustry:core:$mindustryVersion"
	implementation "org.ow2.asm:asm:9.6"
	implementation "org.ow2.asm:asm-commons:9.6"
}

tasks.withType(JavaCompile).configureEach {
	options.encoding = "UTF-8"

	options.compilerArgs.addAll([
			"--add-exports", "java.base/jdk.internal.misc=ALL-UNNAMED"
	])
}

test {
	jvmArgs.addAll([
			"--add-exports", "java.base/jdk.internal.misc=ALL-UNNAMED"
	])
}

task jarAndroid {
	dependsOn "jar"

	doLast {
		if (!sdkRoot || !new File(sdkRoot).exists()) throw new GradleException("No valid Android SDK found. Ensure that ANDROID_HOME is set to your Android SDK directory.")

		def platformRoot = new File("$sdkRoot/platforms/").listFiles().sort().reverse().find { f -> new File(f, "android.jar").exists() }

		if (!platformRoot) throw new GradleException("No android.jar found. Ensure that you have an Android platform installed.")

		//collect dependencies needed for desugaring
		def dependencies = (configurations.compileClasspath.asList() + configurations.runtimeClasspath.asList() + [new File(platformRoot, "android.jar")]).collect { "--classpath $it.path" }.join(" ")

		def d8 = isWindows ? "d8.bat" : "d8"

		//dex and desugar files - this requires d8 in your PATH
		"$d8 $dependencies --min-api 36 --output ${project.archivesBaseName}Android.jar ${project.archivesBaseName}Desktop.jar"
				.execute(null, new File("$buildDir/libs")).waitForProcessOutput(System.out, System.err)
	}
}

jar {
	archiveFileName = "${base.archivesBaseName}Desktop.jar"
	duplicatesStrategy = DuplicatesStrategy.EXCLUDE
}

task deploy(type: Jar) {
	dependsOn jarAndroid
	dependsOn jar
	archiveFileName = "${base.archivesBaseName}.jar"

	from { [zipTree("$buildDir/libs/${project.archivesBaseName}Desktop.jar"), zipTree("$buildDir/libs/${project.archivesBaseName}Android.jar")] }

	doLast {
		delete {
			delete "$buildDir/libs/${project.archivesBaseName}Desktop.jar"
			delete "$buildDir/libs/${project.archivesBaseName}Android.jar"
		}
	}
}
